generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  name     String  @default("Unknown")
  email    String  @unique @default("unknown@example.com")
  password String  @default("changeme")
  avatar   String  @default("https://www.gravatar.com/avatar/00000000000000000000000000000000?d=mp")

  shorter Shorter[]
  customDomains CustomDomain[]
}

model CustomDomain {
  id            String   @id @default(cuid())
  domain        String   @unique
  userId        String
  isVerified    Boolean  @default(false)
  verificationToken String @unique
  dnsRecord     String  
  sslEnabled    Boolean  @default(false)
  sslExpiresAt  DateTime?
  status        String   @default("pending") 
  lastChecked   DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  shorterUrls   Shorter[]
  @@index([domain])
  @@index([userId])
}

model Shorter {
  id        String   @id @default(cuid())
  fullUrl   String
  shortUrl  String   @unique
  clicks    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  customDomainId String?
  customDomain   CustomDomain? @relation(fields: [customDomainId], references: [id])
  isVanity      Boolean @default(false)
  vanitySlug    String?
  title         String? 
  description   String? 
  userId   String? 
  user     User?   @relation(fields: [userId], references: [id])
  clickAnalytics ClickAnalytics[]
  qrCode         QRCode?
  qrCodeEnabled  Boolean @default(false)
  @@index([shortUrl])
  @@index([customDomainId])
  @@index([vanitySlug])
}

model Token {
  id        String   @id @default(cuid())
  email     String
  otp       String
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([email])
}

model ClickAnalytics {
  id        String   @id @default(cuid())
  shortUrl  String
  ipAddress String
  userAgent String
  timestamp DateTime @default(now())
  country   String?
  region    String?
  city      String?
  deviceType String?  // mobile, desktop, tablet
  browser    String?
  os         String?
  
  // Referrer info
  referrer   String?
  referrerType String? // social, email, ads, direct, search
  utmSource    String?
  utmMedium    String?
  utmCampaign  String?
  utmTerm      String?
  utmContent   String?
  
  // Relationship
  shorter   Shorter @relation(fields: [shortUrl], references: [shortUrl])
  
  @@index([shortUrl])
  @@index([timestamp])
  @@index([country])
  @@index([referrerType])
}

model QRCode {
  id        String   @id @default(cuid())
  shortUrl  String   @unique
  qrData    String   // Base64 encoded QR code image
  
  // QR Code customization settings
  isDynamic Boolean  @default(false)
  
  // Design settings
  foregroundColor String @default("#000000")
  backgroundColor String @default("#ffffff")
  
  // Logo settings
  hasLogo     Boolean @default(false)
  logoUrl     String?
  logoSize    Int     @default(20) // percentage
  
  // Style settings
  dotStyle    String  @default("square") // square, circle, rounded
  cornerStyle String  @default("square") // square, circle, rounded
  
  // Gradient settings
  hasGradient Boolean @default(false)
  gradientType String @default("linear") // linear, radial
  gradientDirection String @default("to-bottom") // CSS gradient direction
  gradientStartColor String?
  gradientEndColor String?
  
  // Pattern settings
  pattern     String @default("solid") // solid, dots, lines
  
  // Border settings
  hasBorder   Boolean @default(false)
  borderColor String @default("#000000")
  borderWidth Int    @default(1)
  
  // Size and quality
  size        Int    @default(200) // pixel size
  quality     String @default("M") // L, M, Q, H
  
  // Analytics
  scans       Int    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationship
  shorter     Shorter @relation(fields: [shortUrl], references: [shortUrl])
  qrScans     QRScan[]
  
  @@index([shortUrl])
}

model QRScan {
  id        String   @id @default(cuid())
  qrCodeId  String
  ipAddress String
  userAgent String
  timestamp DateTime @default(now())
  
  // Parsed data
  country   String?
  region    String?
  city      String?
  
  // Device info
  deviceType String?  // mobile, desktop, tablet
  browser    String?
  os         String?
  
  // Referrer info
  referrer   String?
  
  // Relationship
  qrCode    QRCode @relation(fields: [qrCodeId], references: [id])
  
  @@index([qrCodeId])
  @@index([timestamp])
}

